import telebot
import math
import random
from datetime import datetime
from telebot import types

bot = telebot.TeleBot("7943448608:AAE1IYaj8whgUvJHYDCBOFc770yH2uX9_UU")

def greet(name):
    return f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø —Ç–≤–æ–π Python-–ø–æ–º–æ—â–Ω–∏–∫."

def power(base, exponent=2):
    return base ** exponent

def factorial(n):
    return 1 if n == 0 else n * factorial(n-1)

square = lambda x: x * x
cube = lambda x: x ** 3

def get_random_number():
    return random.randint(1, 100)

def get_circle_area(radius):
    return math.pi * radius ** 2

def get_current_time():
    return datetime.now().strftime("%H:%M:%S")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–§—É–Ω–∫—Ü–∏–∏")
    btn2 = types.KeyboardButton("–ú–æ–¥—É–ª–∏")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, greet(message.from_user.first_name), reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–§—É–Ω–∫—Ü–∏–∏")
def show_functions(message):
    text = """üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
/fact - –í—ã—á–∏—Å–ª–∏—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
/power - –í–æ–∑–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –≤ —Å—Ç–µ–ø–µ–Ω—å
/lambda - –ü—Ä–∏–º–µ—Ä—ã –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–π"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda message: message.text == "–ú–æ–¥—É–ª–∏")
def show_modules(message):
    text = """üì¶ –†–∞–±–æ—Ç–∞ —Å –º–æ–¥—É–ª—è–º–∏:
/random - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
/circle - –ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['fact'])
def handle_factorial(message):
    try:
        num = int(message.text.split()[1])
        if num < 0:
            bot.reply_to(message, "–§–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª!")
        else:
            bot.reply_to(message, f"{num}! = {factorial(num)}")
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /fact [—á–∏—Å–ª–æ]")

@bot.message_handler(commands=['power'])
def handle_power(message):
    try:
        args = message.text.split()
        base = float(args[1])
        exponent = float(args[2]) if len(args) > 2 else 2
        bot.reply_to(message, f"{base}^{exponent} = {power(base, exponent)}")
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /power [–æ—Å–Ω–æ–≤–∞–Ω–∏–µ] [—Å—Ç–µ–ø–µ–Ω—å=2]")

@bot.message_handler(commands=['lambda'])
def handle_lambda(message):
    examples = [
        f"–ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ 5: {square(5)}",
        f"–ö—É–± —á–∏—Å–ª–∞ 3: {cube(3)}",
        "–õ—è–º–±–¥–∞-—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: sorted([3,1,4], key=lambda x: -x) ‚Üí [4, 3, 1]"
    ]
    bot.reply_to(message, "\n".join(examples))

@bot.message_handler(commands=['random'])
def handle_random(message):
    bot.reply_to(message, f"–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {get_random_number()}")

@bot.message_handler(commands=['circle'])
def handle_circle(message):
    try:
        radius = float(message.text.split()[1])
        bot.reply_to(message, f"–ü–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞: {get_circle_area(radius):.2f}")
    except (IndexError, ValueError):
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /circle [—Ä–∞–¥–∏—É—Å]")

@bot.message_handler(commands=['time'])
def handle_time(message):
    bot.reply_to(message, f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {get_current_time()}")

bot.polling()
